// Core/NPM Modules
const product = require('iter-tools/lib/product');
const fs      = require("fs");
const mock    = require('mock-fs');
const _       = require('lodash');

// Mock file operations
const mockFileLibrary = {
    pathExists: {
        // 'path/fileExists': {  },
        // 'path/nonempty': { 'file': '' },
        emptyDir: 'mock.directory()',
        nonEmptyDir: 'mock.directory({ items: { file: mock.file() } })',
        file: 'mock.file()'
    },
    fileWithContent: {
        pathContent: {
            file1: "new Buffer('abc')",
            someDir: 'mock.directory()'
        }
    }
};


/**
 * Generate test cases based on the global object functionConstraints.
 *
 * @param {String} filepath            Path to write test file.
 * @param {Object} functionConstraints Constraints object as returned by `constraints`.
 */
function generateTestCases(filepath, functionConstraints) {

    // Content string. This will be built up to generate the full text of the test string.
    let content = `let http = require('http');\nlet fs = require('fs');\nconst expect = require('expect');\nconst request = require('request');\nvar id = "666ffce4f937112d1f5f7ff0";\nvar token = "9ea5125bbc548d8af9f944ed6c9f87782b533c3c9bac7b1b4f9a194d01e794e432f08b12eeefce7a291ea7d71f777894";\nvar id1 = "555ffce4f937112d1f5f7ff0";\nvar token1 = "8ea5125bbc548d8af9f944ed6c9f87782b533c3c9bac7b1b4f9a194d01e794e432f08b12eeefce7a291ea7d71f777894";\n`;
	content += `var datastudymodel = {
  name: 'dStudy',
  description: 'A',
  studyKind: 'dataStudy',
  researcherName: 'R',
  contact: 'bramesh@ncsu.edu',
  awards: undefined,
  awardOptions:
   [ 'Amazon Gift Card',
     'Github Swag',
     'BrowserStack',
     'Windows Surface RT',
     'iPad Mini',
     'Other',
     'None' ],
  status: 'open',
  goal: '100',
  invitecode: 'RESEARCH',
  markdown: '\\n{NumberQuestions:true}\\n-----------\\n\\n### Upload File\\n> {upload:true}\\n\\n### Ask other questions\\n> {rows:3}\\n'
};\n`;
	content += `var surveymodel = {
  name: 'SStudy',
  description: 'A',
  studyKind: 'survey',
  researcherName: 'R',
  contact: 'bramesh@ncsu.edu',
  awards: undefined,
  awardOptions:
   [ 'Amazon Gift Card',
     'Github Swag',
     'BrowserStack',
     'Windows Surface RT',
     'iPad Mini',
     'Other',
     'None' ],
  status: 'open',
  goal: '100',
  invitecode: 'RESEARCH',
  markdown: ' '
};\n`;

// Iterate over each function in functionConstraints
    for ( let funcName in functionConstraints ) {

        // Reference all constraints for funcName.
        let liter = functionConstraints[funcName].literal;
        let kind = functionConstraints[funcName].kind;

        console.log("Literal is " + liter + " and the kind is " + kind);


        if(kind === 'get') {
                if(liter === '/api/study/vote/status')
                        { //content += `try { request("http://localhost${liter}+"\"",function(err,res,body){});  } catch (e) {} \n`;
                         console.log("Inside api/study/vote/status");
                         content += `try { ${ "request(\"http://localhost{0}\", function(err,res,body) {});".format(liter) } } catch (e) {} \n`;
                        }
                else if(liter === '/api/study/listing')
                        {console.log("Iside api/study/listing");
                         content += `try { ${ "request(\"http://localhost{0}\", function(err,res,body) {});".format(liter) } } catch (e) {} \n`;
                        }

                else if(liter === '/api/study/load/:id')
                        {console.log("Inside/study/load/:id");
                          content += `try { ${ "request(\"http://localhost{0}\"+id, function(err,res,body) {});".format(liter.split(":")[0]) } } catch (e) {} \n`;
                        }
                else if(liter === '/api/study/status/:id')
                        {
                          content += `try { ${ "request(\"http://localhost{0}\"+id, function(err,res,body) {});".format(liter.split(":")[0]) } } catch (e) {} \n`;
                        }
                else if(liter === '/api/study/admin/:token')
                        {
                          content += `try { ${ "request(\"http://localhost{0}\"+token, function(err,res,body) {});".format(liter.split(":")[0]) } } catch (e) {} \n`;
                        }
                else if(liter === '/api/study/admin/download/:token')
                        {
                           content += `try { ${ "request(\"http://localhost{0}\"+token, function(err,res,body) {});".format(liter.split(":")[0]) } } catch (e) {} \n`;
                           content += `try { ${ "request(\"http://localhost{0}\"+token1, function(err,res,body) {});".format(liter.split(":")[0]) } } catch (e) {} \n`;
                         content += `try { ${ "request(\"http://localhost{0}aaaaaa\", function(err,res,body) {});".format(liter.split(":")[0]) } } catch (e) {} \n`;

			}
                else if(liter =='/api/study/admin/assign/:token')
                        {
                           content += `try { ${ "request(\"http://localhost{0}\"+token, function(err,res,body) {});".format(liter.split(":")[0]) } } catch (e) {} \n`;
                        }
}

        else if(kind === 'post')
                {  if(liter === '/api/study/create')
                        {
                         content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: {1} }, function(err,res,body) {});".format(liter,"datastudymodel") } } catch (e) {} \n`;
                        content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: {1} }, function(err,res,body) {});".format(liter,"surveymodel") } } catch (e) {} \n`;
                         content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: {1} }, function(err,res,body) {});".format(liter,"failuremodel") } } catch (e) {} \n`;

                        }
                  else if(liter === '/api/study/vote/submit/')
                        {
                        content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: {studyId: id, fingerprint: \"newfiring\", answers: '{\"answer\": \"sample\"}', email: \"new@ncsu.edu\", contact: \"number\"} }, function(err,res,body) {});".format(liter) } } catch (e) {} \n`;
                        content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: {studyId: id1, fingerprint: \"newfiring\", answers: '{\"answer\": \"sample\"}', email: \"new@ncsu.edu\", contact: \"number\"} }, function(err,res,body) {});".format(liter) } } catch (e) {} \n`;

                        }
                else if(liter === '/api/study/admin/open/')
                        {
                         content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: { token: token } }, function(err,res,body) {});".format(liter) } } catch (e) {} \n`;
                        }
                else if(liter === '/api/study/admin/close/')
                        {
                          content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: { token: token } }, function(err,res,body) {});".format(liter) } } catch (e) {} \n`;
                        }
                else if(liter === '/api/study/admin/notify/')
                        {
                          content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: { email: 'bramesh@ncsu.edu', kind: 'SURFACE' } }, function(err,res,body) {});".format(liter) } } catch (e) {} \n`;
                         content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: { email: 'bramesh@ncsu.edu', kind: 'IPADMINI' } }, function(err,res,body) {});".format(liter) } } catch (e) {} \n`;
                         content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: { email: 'bramesh@ncsu.edu', kind: 'GITHUB' } }, function(err,res,body) {});".format(liter) } } catch (e) {} \n`;
                         content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: { email: 'bramesh@ncsu.edu', kind: 'BROWSERSTACK' } }, function(err,res,body) {});".format(liter) } } catch (e) {} \n`;
                         content += `try { ${ "request({ url: \"http://localhost{0}\", method: \"POST\", json: true, body: { email: 'bramesh@ncsu.edu', kind: 'AMZN' } }, function(err,res,body) {});".format(liter) } } catch (e) {} \n`;

                        }
        }
    // Write final content string to file test.js.
    fs.writeFileSync('test.js', content, "utf8");

}

}
/**
 * Generate test cases for constraints dealing with whether or not a file exists.
 *
 * @param   {Boolean} pathExists      Whether or not to mock the path existing.
 * @param   {Boolean} fileWithContent Whether or not to mock the file existing with content.
 * @param   {String}  funcName        Name of the function under test.
 * @param   {String}  args            Function argument string.
 * @returns {string}                  Full text of the generated file system test.
 */
function generateMockFsTestCases (pathExists, fileWithContent, funcName, args) {

    // Partial test data
    let testCase = "";
    let mergedFS = {};

    // Add mock data for path if pathExists is true.
    if( pathExists ) {
        for (let attrname in mockFileLibrary.pathExists) {
            mergedFS[attrname] = mockFileLibrary.pathExists[attrname];
        }
    }

    // Add mock data for content if fileWithContent is true.
    if( fileWithContent ) {
        for (let attrname in mockFileLibrary.fileWithContent) {
            mergedFS[attrname] = mockFileLibrary.fileWithContent[attrname];
        }
    }

    // Generate and return test case string.
    testCase += 'try{\n';
    testCase += `\tmock(${JSON.stringify(mergedFS).replace(/"/g, '')});\n`;
    testCase += `\t\tsubject.${funcName}(${args});\n`;
    testCase += "\tmock.restore();\n";
    testCase += '} catch(e) {}\n';
    return testCase;
}


// Export
module.exports = generateTestCases;


